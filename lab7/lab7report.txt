Haris Sattar
Lab 7: Deque
Winter 2016
CSE 330

1. Status: 100% completed

2. Complexity Analysis:
Deque:
    Function:                                            Time:           Space:
    Deque() : vec_one(), vec_two()                       O(1)            O(1)
    Deque(const unsigned int size, const T& initial)     O(n)            O(n)
    Deque(const Deque<T> & d)                            O(n)            O(n)
    ~Deque()                                             O(1)            O(1)
    operator=(const Deque<T> & d)                        O(n)            O(n)
    operator[](unsigned int)                             O(1)            O(1)
    front()                                              O(1)            O(1)
    back()                                               O(1)            O(1)
    empty()                                              O(1)            O(1)
    begin()                                              O(1)            O(1)
    end()                                                O(1)            O(1)
    erase(const iterator &)                              O(n)            O(1)
    erase(const iterator &, const iterator &)            O(n)            O(1)
    insert(const iterator &, const T &)                  O(n)            O(1)
    size()                                               O(1)            O(1)
    push_front(const T & value)                          O(n)            O(n)
    push_back(const T & value)                           O(1)            O(1)
    pop_front()                                          O(n)            O(1)
    pop_back()                                           O(1)            O(1)
DequeIterator:
    T & operator[](unsigned int);                        O(1)            O(1)
    DequeIterator()                                      O(1)            O(1)
    DequeIterator(Deque<T> * d, int i)                   O(1)            O(1)
    DequeIterator(const iterator & d)                    O(1)            O(1)
    operator*()                                          O(1)            O(1)
    operator++()                                         O(1)            O(1)
    operator++(int)                                      O(1)            O(1)
    operator--()                                         O(1)            O(1)
    operator--(int)                                      O(1)            O(1)
    operator==(const iterator & r)                       O(1)            O(1)
    operator!=(const iterator & r)                       O(1)            O(1)
    operator<(const iterator & r)                        O(1)            O(1)
    operator[](unsigned int i)                           O(1)            O(1)
    operator=(const iterator & r)                        O(1)            O(1)
    operator+(int i)                                     O(n)            O(1)
    operator-(int i)                                     O(n)            O(1)

3. Source Code:
/*******************************************************************************************
 * Haris Sattar
 * Deque.h
 * 2/20/16
 * header file for Deque
 *******************************************************************************************/
#ifndef DEQUE_H
#define DEQUE_H

#include <vector>

using namespace std;

template <class T> class DequeIterator;

template <class T>
class Deque {
public:
    typedef DequeIterator<T> iterator;

    Deque() : vec_one(), vec_two() { }
    Deque(const unsigned int size, const T& initial) : vec_one(size / 2, initial), vec_two(size - (size / 2), initial) { }
    Deque(const Deque<T> & d) : vec_one(d.vec_one), vec_two(d.vec_two) { }
    ~Deque() { } // destructors for vecOne and vecTwo are automatically called
                 // never call a destructor explicitly
    Deque<T> & operator=(const Deque<T> & d);

    T & operator[](unsigned int);
    T & front();
    T & back();
    bool empty();
    iterator begin();
    iterator end();
    void erase(const iterator &);
    void erase(const iterator &, const iterator &);
    void insert(const iterator &, const T &);
    int size();
    void push_front(const T & value);
    void push_back(const T & value);
    void pop_front();
    void pop_back();
protected:
    vector<T> vec_one;
    vector<T> vec_two;
};

// assignment operator
template <class T>
Deque<T> & Deque<T>::operator=(const Deque<T> & d)
{
    vec_one = d.vec_one;
    vec_two = d.vec_two;
    return *this;
}

// indexing operator
template <class T>
T & Deque<T>::operator[](unsigned int index)
{
    int n = vec_one.size();

    if (index < n)
        return vec_one[(n - 1) - index];
    else
        return vec_two[index - n];
}

// returns the value of the first element
template<class T>
T & Deque<T>::front()
{
    if (vec_one.empty())
        return vec_two.front();
    else
        return vec_one.back();
}

// returns the value of the last element
template<class T>
T & Deque<T>::back()
{
    if (vec_two.empty())
        return vec_one.front();
    else
        return vec_two.back();
}

// returns true if empty
template <class T>
bool Deque<T>::empty()
{
    return vec_one.empty() && vec_two.empty();
}

// adds an element to the beginning of the deque
template <class T>
void Deque<T>::push_front(const T & value)
{
    vec_one.push_back(value);
}

// adds an element to the edn of the deque
template <class T>
void Deque<T>::push_back(const T & value)
{
    vec_two.push_back(value);
}

// removes the first element
template<class T>
void Deque<T>::pop_front()
{
    if (vec_one.empty())
        vec_two.erase(vec_two.begin());
    else
        vec_one.pop_back();
}

// removes the last element
template<class T>
void Deque<T>::pop_back()
{
    if (vec_two.empty()) {
        vector<T> temp;
        for (int i = 1; i < vec_one.size(); i++)
            temp.push_back(vec_one[i]);
        vec_one = temp;
    }
    else
        vec_two.pop_back();
}

// deletes the element at the given position
template<class T>
void Deque<T>::erase(const iterator & pos)
{
    int index = pos.index;
    int n = vec_one.size();

    if (index < n)
        vec_one.erase(vec_one.begin() + (n - 1) - index);
    else
        vec_two.erase(vec_two.begin() + index - n);
}

// deletes elements in a given range
template<class T>
void Deque<T>::erase(const iterator & start, const iterator & end)
{
    int start_index = start.index;
    int end_index = end.index;
    int n = vec_one.size();

    if (start_index < n && end_index < n)
        for (iterator i = start, j = end; i != j; i++, start_index++)
            vec_one.erase(vec_one.begin() + (n - 1) - start_index + 1);
    else if (start_index > n && end_index > n)
        for (iterator i = start, j = end; i != j; i++, start_index++)
            vec_two.erase(vec_two.begin() + start_index - n);
    else {
        vec_one.erase(vec_one.begin(), vec_one.begin() + (n - 1) - start_index + 1);
        vec_two.erase(vec_two.begin(), vec_two.begin() + end_index - n);
    }
}

// inserts an element at the given position
template<class T>
void Deque<T>::insert(const iterator & pos, const T & value)
{
    int index = pos.index;
    int n = vec_one.size();

    if (index < n)
        vec_one.insert(vec_one.begin() + (n - 1) - index + 1, value);
    else
        vec_two.insert(vec_two.begin() + index - n, value);
}

// returns the size of the deque
template <class T>
int Deque<T>::size()
{
    return vec_one.size() + vec_two.size();
}

// returns an iterator to the first element
template <class T>
typename Deque<T>::iterator Deque<T>::begin()
{
    return iterator(this, 0);
}

// returns an iterator to the last element + 1
template <class T>
typename Deque<T>::iterator Deque<T>::end()
{
    return iterator(this, size());
}

template <class T>
class DequeIterator {
    friend class Deque<T>;
    typedef DequeIterator<T> iterator;
public:
    DequeIterator() : theDeque(0), index(0) { }
    DequeIterator(Deque<T> * d, int i) : theDeque(d), index(i) { }
    DequeIterator(const iterator & d) : theDeque(d.theDeque), index(d.index) { }

    T & operator*();
    iterator & operator++();
    iterator operator++(int);
    iterator & operator--();
    iterator operator--(int);
    bool operator==(const iterator & r);
    bool operator!=(const iterator & r);
    bool operator<(const iterator & r);
    T & operator[](unsigned int i);
    iterator operator=(const iterator & r);
    iterator operator+(int i);
    iterator operator-(int i);
protected:
    Deque<T> * theDeque;
    int index;
};

// post-increment
template <class T>
typename DequeIterator<T>::iterator DequeIterator<T>::operator++(int)
{
    DequeIterator<T> temp = *this;
    ++(*this);
    return temp;
}

//pre-increment
template <class T>
typename DequeIterator<T>::iterator & DequeIterator<T>::operator++()
{
    ++index;
    return *this;
}

// post-decrement
template <class T>
typename DequeIterator<T>::iterator DequeIterator<T>::operator--(int)
{
    DequeIterator<T> temp = *this;
    --(*this);
    return temp;
}

// pre-decrement
template <class T>
typename DequeIterator<T>::iterator & DequeIterator<T>::operator--()
{
    --index;
    return *this;
}

// comparison operator
template <class T>
bool DequeIterator<T>::operator==(const iterator & r)
{
    return theDeque == r.theDeque && index == r.index;
}

// not equal operator
template <class T>
bool DequeIterator<T>::operator!=(const iterator & r)
{
    return !(*this == r);
}

// less than operator
template <class T>
bool DequeIterator<T>::operator<(const iterator & r)
{
    return theDeque == r.theDeque && index < r.index;
}

// assignment operator
template <class T>
typename DequeIterator<T>::iterator DequeIterator<T>::operator=(const iterator & r)
{
    theDeque = r.theDeque;
    index = r.index;
    return *this;
}

// dereference operator
template <class T>
T & DequeIterator<T>::operator*()
{
    return (*theDeque)[index];
}

// increment iterator position by i
template <class T>
typename DequeIterator<T>::iterator DequeIterator<T>::operator+(int i)
{
    for (int j = 0; j < i; j++)
        ++(*this);
    return *this;
}

// decrease iterator position by i
template <class T>
typename DequeIterator<T>::iterator DequeIterator<T>::operator-(int i)
{
    for (int j = 0; j < i; j++)
        --(*this);
    return *this;
}

#endif

// Deque_test.cpp

#include <iostream>
#include <cassert>

#include "Deque.h"

using namespace std;

int main()
{
    Deque<int> d;

    d.push_back(10);
    d.push_back(20);
    assert(d.front() == 10);
    assert(d.back() == 20);

    d.push_front(1);
    d.push_front(2);
    d.push_front(3);
    assert(d.front() == 3);
    assert(d.back() == 20);

    d.pop_back();
    d.pop_back();
    d.pop_back();
    assert(d.front() == 3);
    assert(d.back() == 2);

    d.push_back(1);
    d.push_back(0);

    Deque<int>::iterator i;
    int counter = 3;
    for (i = d.begin(); i != d.end(); i++)
        assert(*i == counter--);

    for (counter = 0; counter < d.size(); counter++)
        assert(d[counter] == d.size()-counter-1);

    i = d.begin() + 3;
    Deque<int>::iterator j(i), k;
    k = j = i - 2;
    assert(*k == 2);

    for (i = d.begin(); not(i == d.end()); ++i)
        cout << *i << " ";
    cout << endl;

    d.erase(d.begin()+3);
    d.erase(d.begin(), d.begin()+2);
    assert(d.size() == 1);
    assert(d[0] == 1);

    Deque<int> c(d);
    c.front() = 3;
    assert(c.back() == 3);

    c.push_front(1);
    c.insert(c.begin(), 0);
    c.insert(c.begin()+2, 2);

    for (i = c.begin(); not(i == c.end()); ++i)
        cout << *i << " ";
    cout << endl;

    for (counter = 0; counter < c.size(); counter++)
        assert(c[counter] == counter);

    cout << "SUCCESS\n";
}

// test.cpp

#include <iostream>
#include <cassert>
//#include <queue>
#include "Deque.h"

using namespace std;

int main()
{
    Deque<int> d;

    d.push_back(10);
    d.push_back(20);
    d.push_front(1);
    d.push_front(2);
    d.push_front(3);

    Deque<int> c;
    c = d;

    Deque<int>::iterator i;
    for (i = c.begin(); i != c.end(); ++i)
        cout << *i << " ";
    cout << endl;
}

4. Sample Run:

Script started on Sun, Mar  6, 2016  3:56:26 PM
[005025913@csex11 lab7]$ g++ Deque_test.cpp -o Deque_test
[005025913@csex11 lab7]$ ./Deque_test
3 2 1 0
0 1 2 3
SUCCESS
[005025913@csex11 lab7]$ exit

Script done on Sun, Mar  6, 2016  3:57:01 PM

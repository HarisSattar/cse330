Haris Sattar
Lab 3: Vector
Winter 2016
CSE 330

1. Status: 100% completed

2. Complexity Analysis:

        Vector():
            Time: O(1)
            Space: O(1)
        Vector(unsigned int size):
            Time: O(n)
            Space: O(n)
        Vector(unsigned int size, const T& initial):
            Time: O(n)
            Space: O(n)
        Vector(const Vector<T>& v):
            Time: O(n)
            Space: O(n)
        ~Vector():
            Time: O(1)
            Space: O(1)
        capacity():
            Time: O(1)
            Space: O(1)
        size():
            Time: O(1)
            Space: O(1)
        empty():
            Time: O(1)
            Space: O(1)
        begin():
            Time: O(1)
            Space: O(1)
        end():
            Time: O(1)
            Space: O(1)
        front():
            Time: O(1)
            Space: O(1)
        back():
            Time: O(1)
            Space: O(1)
        push_back(const T& value):
            Time: O(1)
            Space: O(1)
        pop_back():
            Time: O(1)
            Space: O(1)
        reserve(unsigned int capacity):
            Time: O(n)
            Space: O(n)
        resize(unsigned int size):
            Time: O(n)
            Space: O(n)
        operator[](unsigned int index):
            Time: O(1)
            Space: O(1)
        operator=(const Vector<T>&):
            Time: O(n)
            Space: O(n)
        operator==(const Vector<T>&):
            Time: O(1)
            Space: O(1)

3. Source Code:

/*
* Haris Sattar
* Vector.h
* 2/14/16
* This is the header file for Vector_test.cpp
*/

#ifndef VECTOR_H
#define VECTOR_H

using namespace std;

template <class T>
class Vector
{
public:

    typedef T * iterator;

    Vector();
    Vector(unsigned int size);
    Vector(unsigned int size, const T& initial);
    Vector(const Vector<T>& v);
    ~Vector();

    unsigned int capacity() const;
    unsigned int size() const;
    bool empty() const;

    iterator begin();
    iterator end();
    T& front();
    T& back();
    void push_back(const T& value);
    void pop_back();

    void reserve(unsigned int capacity);
    void resize(unsigned int size);        // adjust size

    T& operator[](unsigned int index);
    Vector<T>& operator=(const Vector<T>&);
    bool operator==(const Vector<T>&);

private:
    unsigned int my_size;
    unsigned int my_capacity;
    T* buffer;
};

template <class T>
Vector<T>::Vector()
{
    buffer = 0;
    resize(0);
}

template <class T>
Vector<T>::Vector(unsigned int size)
{
    buffer = 0;
    resize(size);
}

template <class T>
Vector<T>::Vector(unsigned int size, const T& initial)
{
    my_size = size;
    my_capacity = my_size;
    buffer = new T[my_capacity];

    for (int i = 0; i < my_size; i++)
        buffer[i] = initial;
}

// copy constructor
template <class T>
Vector<T>::Vector(const Vector<T>& v)
{
    my_size = v.size();
    my_capacity = v.capacity();
    buffer = new T[my_capacity];

    for (int i = 0; i < my_size; i++)
        buffer[i] = v.buffer[i];
}

// destructor
template <class T>
Vector<T>::~Vector()
{
    my_size = 0;
    my_capacity = 0;
    delete [] buffer;
} // ~Vector

// return first element
template <class T>
typename Vector<T>::iterator Vector<T>::begin()
{
        return buffer;
} // begin

// return last element
template <class T>
typename Vector<T>::iterator Vector<T>::end()
{
        return buffer + my_size;
} // end

// return capacity of vector (in elements)
template <class T>
unsigned int Vector<T>::capacity() const
{
    return my_capacity;
} // capacity

// return the number of elements in the vector
template <class T>
unsigned int Vector<T>::size() const
{
    return my_size;
} // size

// return true if empty
template <class T>
bool Vector<T>::empty() const
{
    return my_size == 0;
} // empty

// adjust capacity
template <class T>
void Vector<T>::reserve(unsigned int capacity)
{
    if (buffer == 0) {
        my_size = 0;
        my_capacity = 0;
    }

    if (capacity <= my_capacity)
        return;

    T* new_buffer = new T[capacity];

    for (int i = 0; i < my_size; i++)
        new_buffer[i] = buffer[i];

    my_capacity = capacity;
    delete [] buffer;
    buffer = new_buffer;
} // reserve

// adjust size
template <class T>
void Vector<T>::resize(unsigned int size)
{
    reserve(size);
    my_size = size;
} // resize

// remove the last element
template <class T>
void Vector<T>::pop_back()
{
    if (my_size == 0)
        return;

    my_size--;
} // push_front

// add a new element
template <class T>
void Vector<T>::push_back(const T& value)
{
    if (my_size >= my_capacity)
        reserve(my_capacity + 5);

    buffer[my_size] = value;
    my_size++;
} // push_back

// returns true if equal
template <class T>
bool Vector<T>::operator==(const Vector<T>& right)
{
    if (size != right.size)
        return false;

    int i, j;
    for (i = 0, j = 0; i < size && j < right.size; i++, j++)
        if (buffer[i] != right.buffer[j])
            return false;

    return true;
} //operator ==

// indexing operator
template <class T>
T& Vector<T>::operator[](unsigned int index)
{
    return buffer[index];
} // operator[]

// assignment operator
template <class T>
Vector<T>& Vector<T>::operator=(const Vector<T>& right)
{
    delete [] buffer;
    my_size = right.size();
    my_capacity = right.capacity();
    buffer = new T[my_capacity];

    for (int i = 0; i < my_size; i++)
        buffer[i] = right.buffer[i];
} // operator=

// return a reference to the first element
template <class T>
T& Vector<T>::front()
{
    return buffer[0];
} // first

// return a reference to the last element
template <class T>
T& Vector<T>::back()
{
    return buffer[my_size - 1];
} // back

#endif

/*
* Haris Sattar
* Vector_test.cpp
* 2/5/16
* This is the test file for Vector.h
*/

#include <iostream>
#include <string>
#include <cassert>
#include "Vector.h"

using namespace std;

int main()
{

   Vector<int> v;

   v.reserve(2);

   assert(v.capacity() == 2);
   Vector<string> v1(2);
   assert(v1.capacity() == 2);
   assert(v1.size() == 2);
   assert(v1[0] == "");
   assert(v1[1] == "");

   v1[0] = "hi";
   assert(v1[0] == "hi");

   Vector<int> v2(2, 7);
   assert(v2[1] == 7);

   Vector<int> v10(v2);
   assert(v10[1] == 7);

   Vector<string> v3(2, "hello");
   assert(v3.size() == 2);
   assert(v3.capacity() == 2);
   assert(v3[0] == "hello");
   assert(v3[1] == "hello");

   v3.resize(1);
   assert(v3.size() == 1);
   assert(v3[0] == "hello");

   Vector<string> v4 = v3;
   assert(v4.size() == 1);
   assert(v4[0] == v3[0]);
   v3[0] = "test";
   assert(v4[0] != v3[0]);  // fails when assignment results in shallow copy
   assert(v4[0] == "hello");

   v3.pop_back();
   assert(v3.size() == 0);

   Vector<int> v5(7, 9);
   Vector<int>::iterator it = v5.begin();
   while (it != v5.end())
   {
      assert(*it == 9);
      ++it;
   }

   Vector<int> v6;
   v6.push_back(100);
   assert(v6.size() == 1);
   assert(v6[0] == 100);
   v6.push_back(101);
   assert(v6.size() == 2);
   assert(v6[0] == 100);
   v6.push_back(101);

   cout << "SUCCESS\n";
}

4. Sample Run

Script started on Sun 14 Feb 2016 07:38:59 PM EST
[005025913@csex11 lab4]$ g++ Vector_test.cpp -o Vector_test
[005025913@csex11 lab4]$ ./Vector_test
SUCCESS
[005025913@csex11 lab4]$ exit

Script done on Sun 14 Feb 2016 07:39:32 PM EST
